{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/./backend/src/config/middleware/adapter/captcha.js","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/middlewares.js","webpack://backend/./backend/src/config/middleware/captcha.js","webpack://backend/external \"require3\"","webpack://backend/./backend/src/common/utils.js","webpack://backend/./backend/src/config/middleware/captchaVerify.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/version.js","webpack://backend/./backend/src/controller/captcha.js","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/version.js","webpack://backend/./backend/src/service/captcha.js","webpack://backend/./backend/src/models.js","webpack://backend/./backend/src/meta.js","webpack://backend/./backend/src/config/validation/schemas.js"],"names":[],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA,iBAAiB,mBAAO,CAAC,CAAU;AACnC;AACA;AACA;AACA,cAAc,mBAAO,CAAC,CAA0B;;AAEhD;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;;AAEA;AACA,kCAAkC,6BAA6B;AAC/D;AACA,+CAA+C,oBAAoB;AACnE;AACA;AACA;AACA,qCAAqC,0BAA0B;AAC/D,mEAAmE,iDAAiD;AACpH;AACA,cAAc;AACd;;AAEA;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA,qCAAqC,0BAA0B;AAC/D;AACA;AACA;;AAEA;AACA,kBAAkB,oCAAoC;AACtD;AACA;AACA,qCAAqC,0BAA0B;AAC/D;AACA,+DAA+D,qBAAqB;AACpF;AACA;AACA,+CAA+C,yEAAyE;AACxH;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,mDAAmD;AACrE;AACA;AACA,qCAAqC,0BAA0B;AAC/D;AACA,+DAA+D,qBAAqB;AACpF;AACA;AACA;AACA;AACA,+CAA+C,yEAAyE;AACxH;AACA;AACA;AACA;AACA,iBAAiB,gBAAgB,GAAG,cAAc;AAClD;AACA;AACA;AACA;A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","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","const require3 = require('require3');\nconst mparse = require3('egg-born-mparse').default;\nconst extend = require3('extend2');\nconst uuid = require3('uuid');\nconst utils = require('../../../common/utils.js');\n\nconst Fn = module.exports = ctx => {\n  const moduleInfo = ctx.app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Captcha {\n\n    constructor(moduleName) {\n      this.moduleName = moduleName || ctx.module.info.relativeName;\n    }\n\n    // other module's captcha\n    module(moduleName) {\n      return new (Fn(ctx))(moduleName);\n    }\n\n    async getProvider({ module, sceneName }) {\n      // default scene\n      const configDefault = ctx.config.module(moduleInfo.relativeName);\n      const sceneDefault = configDefault.captcha.scenes.default;\n      // module scene\n      const configModule = ctx.config.module(module);\n      const sceneModule = (configModule.captcha && configModule.captcha.scenes && configModule.captcha.scenes[sceneName]) || null;\n      return extend(true, {}, sceneDefault, sceneModule);\n    }\n\n    // create provider instance\n    async createProviderInstance({ module, sceneName, context }) {\n      // provider\n      const provider = await this.getProvider({ module, sceneName });\n      // instance id\n      const providerInstanceId = uuid.v4().replace(/-/g, '');\n      // cache\n      const key = utils.getCacheKey({ ctx, providerInstanceId });\n      await ctx.cache.db.module(moduleInfo.relativeName).set(key, { providerInstanceId, module, sceneName, context }, provider.timeout);\n      // ok\n      return { providerInstanceId, provider };\n    }\n\n    // get\n    async getProviderInstance({ providerInstanceId }) {\n      // cache\n      const cache = ctx.cache.db.module(moduleInfo.relativeName);\n      const key = utils.getCacheKey({ ctx, providerInstanceId });\n      // get\n      return await cache.get(key);\n    }\n\n    // update\n    async update({ providerInstanceId, data, context }) {\n      // cache\n      const cache = ctx.cache.db.module(moduleInfo.relativeName);\n      const key = utils.getCacheKey({ ctx, providerInstanceId });\n      // get\n      const providerInstance = await this.getProviderInstance({ providerInstanceId });\n      if (!providerInstance) ctx.throw(403);\n      // provider\n      const provider = await this.getProvider({ module: providerInstance.module, sceneName: providerInstance.sceneName });\n      // update\n      providerInstance.data = data;\n      providerInstance.context = context;\n      await cache.set(key, providerInstance, provider.timeout);\n    }\n\n    async verify({ module, sceneName, providerInstanceId, dataInput }) {\n      // cache\n      const cache = ctx.cache.db.module(moduleInfo.relativeName);\n      const key = utils.getCacheKey({ ctx, providerInstanceId });\n      // get\n      const providerInstance = await this.getProviderInstance({ providerInstanceId });\n      if (!providerInstance) ctx.throw(403);\n      // check if the same scene\n      if (module !== providerInstance.module || sceneName !== providerInstance.sceneName) ctx.throw(403);\n      // provider\n      const provider = await this.getProvider({ module: providerInstance.module, sceneName: providerInstance.sceneName });\n      // invoke provider verify\n      const _moduleInfo = mparse.parseInfo(provider.module);\n      await ctx.performAction({\n        method: 'post',\n        url: `/${_moduleInfo.url}/${provider.name}/verify`,\n        body: {\n          providerInstanceId,\n          context: providerInstance.context,\n          data: providerInstance.data,\n          dataInput,\n        },\n      });\n      // // clear\n      // await cache.remove(key);\n      // should hold the cache item\n      // update\n      providerInstance.data = null;\n      await cache.set(key, providerInstance, provider.timeout);\n    }\n\n  }\n  return Captcha;\n};\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst middlewares = require('./config/middlewares.js');\n\nmodule.exports = app => {\n\n  // routes\n  const routes = require('./routes.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    routes,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    middlewares,\n    meta,\n  };\n\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // middlewares\n  config.middlewares = {\n    captcha: {\n      global: false,\n      dependencies: 'auth,cachedb',\n    },\n    captchaVerify: {\n      global: false,\n      dependencies: 'auth,cachedb',\n    },\n  };\n\n  // captcha scenes\n  config.captcha = {\n    scenes: {\n      default: {\n        module: 'a-captchasimple',\n        name: 'captcha',\n        timeout: 20 * 60 * 1000,\n      },\n    },\n  };\n\n  return config;\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n  'Scene Not Specified': '场景未指定',\n};\n","// error code should start from 1001\nmodule.exports = {\n  1001: 'Scene Not Specified',\n};\n","const captcha = require('./middleware/captcha.js');\nconst captchaVerify = require('./middleware/captchaVerify.js');\n\nmodule.exports = {\n  captcha,\n  captchaVerify,\n};\n","// captcha\nconst CaptchaFn = require('./adapter/captcha.js');\nconst CAPTCHA = Symbol('CTX#__CAPTCHA');\n\nmodule.exports = () => {\n  return async function captcha(ctx, next) {\n    ctx.meta = ctx.meta || {};\n    // captchaContainer\n    Object.defineProperty(ctx.meta, 'captcha', {\n      get() {\n        if (ctx.meta[CAPTCHA] === undefined) {\n          ctx.meta[CAPTCHA] = new (CaptchaFn(ctx))();\n        }\n        return ctx.meta[CAPTCHA];\n      },\n    });\n    // next\n    await next();\n  };\n};\n","module.exports = require(\"require3\");","module.exports = {\n  getCacheKey({ ctx, providerInstanceId }) {\n    return `captcha:${ctx.meta.user.anonymousId()}:${providerInstanceId}`;\n  },\n};\n","const CaptchaFn = require('./adapter/captcha.js');\n\nmodule.exports = (options2, app) => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  return async function captchaVerify(ctx, next, options) {\n    // must exists\n    const scene = options.scene;\n    const scenes = options.scenes;\n    if (!scene && !scenes) ctx.throw.module(moduleInfo.relativeName, 1001);\n\n    // scene\n    if (scene) {\n      await sceneVerify({ ctx, scene });\n    } else if (scenes) {\n      for (const scene of scenes) {\n        await sceneVerify({ ctx, scene });\n      }\n    }\n\n    // next\n    await next();\n  };\n};\n\nasync function sceneVerify({ ctx, scene }) {\n  // params\n  const module = scene.module || ctx.module.info.relativeName;\n  const sceneName = scene.name;\n  const captchaData = ctx.request.body[scene.dataKey || 'captcha'];\n  const providerInstanceId = captchaData.providerInstanceId;\n  const dataInput = captchaData.data;\n  // verify\n  try {\n    const _captcha = new (CaptchaFn(ctx))();\n    await _captcha.verify({ module, sceneName, providerInstanceId, dataInput });\n  } catch (err) {\n    throw combineCaptchaError({\n      fieldKey: scene.fieldKey || 'token',\n      message: err.message,\n    });\n  }\n}\n\nfunction combineCaptchaError({ fieldKey, message }) {\n  // error\n  const error = new Error();\n  error.code = 422;\n  error.message = [\n    {\n      keyword: 'x-captcha',\n      params: [],\n      message,\n      dataPath: `/captcha/${fieldKey}`,\n      schemaPath: `#/properties/captcha/${fieldKey}/x-captcha`,\n    },\n  ];\n  return error;\n}\n","const version = require('./controller/version.js');\nconst captcha = require('./controller/captcha.js');\n\nmodule.exports = app => {\n  const routes = [\n    // version\n    { method: 'post', path: 'version/update', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/init', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/test', controller: version, middlewares: 'test' },\n    // captcha\n    { method: 'post', path: 'captcha/createProviderInstance', controller: captcha, middlewares: 'captcha' },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async init() {\n      await this.service.version.init(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async test() {\n      await this.service.version.test(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n  return VersionController;\n};\n","module.exports = app => {\n  class CaptchaController extends app.Controller {\n\n    async createProviderInstance() {\n      const res = await this.service.captcha.createProviderInstance({\n        module: this.ctx.request.body.module,\n        sceneName: this.ctx.request.body.sceneName,\n        context: this.ctx.request.body.context,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n  return CaptchaController;\n};\n","const version = require('./service/version.js');\nconst captcha = require('./service/captcha.js');\n\nmodule.exports = app => {\n  const services = {\n    version,\n    captcha,\n  };\n  return services;\n};\n","module.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(options) {\n    }\n\n    async init(options) {\n    }\n\n    async test() {\n    }\n\n  }\n\n  return Version;\n};\n","module.exports = app => {\n\n  class Captcha extends app.Service {\n\n    async createProviderInstance({ module, sceneName, context }) {\n      return await this.ctx.meta.captcha.createProviderInstance({ module, sceneName, context });\n    }\n\n  }\n\n  return Captcha;\n};\n","module.exports = app => {\n  const models = {\n  };\n  return models;\n};\n","module.exports = app => {\n  const schemas = require('./config/validation/schemas.js')(app);\n  const meta = {\n    base: {\n      atoms: {\n      },\n      functions: {\n      },\n    },\n    validation: {\n      validators: {\n      },\n      keywords: {},\n      schemas: {\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  const schemas = {};\n  return schemas;\n};\n"],"sourceRoot":""}